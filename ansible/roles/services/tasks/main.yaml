---
# roles/services/tasks/main.yml

- name: Clone services from repository
  ansible.builtin.git:
    repo: 'https://github.com/m-mattia-m/infrastructure-setup.git'
    dest: /home/{{ ansible_user }}/infrastructure
    clone: true
    version: main

- name: Update traefik acme.json permissions
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/infrastructure/services/traefik/data/acme.json"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"

- name: Create docker proxy network
  become: true
  ansible.builtin.docker_network:
    name: proxy

- name: Create docker data-net network
  become: true
  ansible.builtin.docker_network:
    name: data-net
    internal: true

- name: S3 File Downloader
  ansible.builtin.include_tasks: ./backup-restore/tasks/main.yaml
  vars:
    s3_bucket: "{{ s3_bucket_name }}"
    destination: "/path/to/destination"
    file_name: ""
    aws_endpoint_url: "{{ s3_endpoint_url }}"
    aws_access_id: "{{ s3_access_id }}"
    aws_secret_key: "{{ s3_access_key }}"
    # restore_backup: false
    # restore_backup_name: ""

- name: Call 'fqdn' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: /home/{{ ansible_user }}/infrastructure/services
    placeholder: "{ansible.fqdn}"
    replacement: "{{ fqdn }}"

- name: Call 'ansible-user' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: /home/{{ ansible_user }}/infrastructure/services
    placeholder: "${ANSIBLE_USER}"
    replacement: "{{ ansible_user }}"

- name: Call 'shlink-fqdn' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: /home/{{ ansible_user }}/infrastructure/services
    placeholder: "{shlink.fqdn}"
    replacement: "{{ shlink_server_fqdn }}"

- name: Call 'shlink-fqdn' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: /home/{{ ansible_user }}/infrastructure/services
    placeholder: "{shlink.fqdn.ui}"
    replacement: "{{ shlink_ui_fqdn }}"

- name: Call 'invoiceplane-fqdn' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: /home/{{ ansible_user }}/infrastructure/services
    placeholder: "{invoiceplane.fqdn}"
    replacement: "{{ invoiceplane_fqdn }}"

- name: Call 'portainer-fqdn' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: /home/{{ ansible_user }}/infrastructure/services
    placeholder: "{portainer.fqdn}"
    replacement: "{{ fqdn }}"

- name: Call 'caServer' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: /home/{{ ansible_user }}/infrastructure/services
    placeholder: "${caServer}"
    replacement: "{{ ca_server }}"

- name: Call 'AllowList - DynDNS script' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: "/home/{{ ansible_user }}/infrastructure/services"
    placeholder: "replace:home.dyn.dns"
    replacement: "{{ allowed_dyn_dns }}"

- name: Call 'AllowList - files to update' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-directory/tasks/main.yaml
  vars:
    target_directory: "/home/{{ ansible_user }}/infrastructure/services"
    placeholder: "replace.files.to.update"
    replacement: "{{ allow_list_files_to_update }}"

# https://www.tecmint.com/change-apache-port-in-linux/
- name: Call 'Apache2 port 80 - port conf' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-file/tasks/main.yaml
  args:
    apply:
      become: true
  vars:
    target_file: "/etc/apache2/ports.conf"
    placeholder: "80"
    replacement: "8979"

- name: Call 'Apache2 port 80 - default conf' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-file/tasks/main.yaml
  args:
    apply:
      become: true
  vars:
    target_file: "/etc/apache2/sites-enabled/000-default.conf"
    placeholder: "80"
    replacement: "8979"

- name: Call 'Apache2 port 443 - port conf' replacement tasks
  ansible.builtin.include_tasks: ./replace-in-file/tasks/main.yaml
  args:
    apply:
      become: true
  vars:
    target_file: "/etc/apache2/ports.conf"
    placeholder: "443"
    replacement: "444"

- name: Create cron-job for dynDNS-check every day at 2am
  ansible.builtin.cron:
    name: "refresh dynDNS"
    minute: "0"
    hour: "2"
    job: "sh /home/{{ ansible_user }}/infrastructure/services/dyndns-check/check-dyndns.sh"

- name: Run "Check-DynDNS" Script
  become: true
  ansible.builtin.shell: "sh /home/{{ ansible_user }}/infrastructure/services/dyndns-check/check-dyndns.sh"

- name: Kill processes running on port 80
  ansible.builtin.include_tasks: ./kill-process/tasks/main.yaml

- name: Copy environment
  vars:
    parent_dir: "{{ playbook_dir | dirname }}"
  ansible.builtin.copy:
    src: "{{ parent_dir }}/config.env"
    dest: "/home/{{ ansible_user }}/infrastructure/"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Generate environment files with }/config.env
  ansible.builtin.make:
    chdir: "/home/{{ ansible_user }}/infrastructure/"
    target: generate-environment

- name: Start DB cluster
  become: true
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_user }}/infrastructure/services/database-cluster

- name: Wait until DB is ready
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 3306
    delay: 10
    timeout: 50

# https://github.com/ansible-collections/community.mysql/issues/85?ref=https://coder.social#issuecomment-758187493
- name: Drop existing database 'shlink'
  ansible.builtin.mysql_db:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: shlink
    state: absent
  failed_when: false

- name: Drop existing database 'invoiceplane'
  ansible.builtin.mysql_db:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: invoiceplane
    state: absent
  failed_when: false

- name: Drop existing user 'shlink'
  ansible.builtin.mysql_user:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: shlink
    host: '%'
    state: absent
  failed_when: false

- name: Drop existing user 'invoiceplane'
  ansible.builtin.mysql_user:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: invoiceplane
    host: '%'
    state: absent
  failed_when: false

- name: Create database 'shlink'
  ansible.builtin.mysql_db:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: shlink
    state: present

- name: Create database 'invoiceplane'
  ansible.builtin.mysql_db:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: invoiceplane
    state: present

- name: Create MySQL user 'shlink'
  ansible.builtin.mysql_user:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: shlink
    host: '%'
    password: "{{ shlink_db_password }}"
    priv: '*.*:ALL'
    state: present

- name: Create MySQL user 'invoiceplane'
  ansible.builtin.mysql_user:
    login_host: 127.0.0.1 # localhost -> unix-socket; 127.0.0.1 -> TCP
    login_port: 3306
    login_user: root
    login_password: "{{ db_cluster_root_password }}"
    connect_timeout: 1200
    name: invoiceplane
    host: '%'
    password: "{{ invoiceplane_db_password }}"
    priv: '*.*:ALL'
    state: present

- name: Start traefik
  become: true
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_user }}/infrastructure/services/traefik

- name: Start whoami
  become: true
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_user }}/infrastructure/services/whoami

- name: Start portainer
  become: true
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_user }}/infrastructure/services/portainer

- name: Start invoiceplane
  become: true
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_user }}/infrastructure/services/invoiceplane

- name: Start shlink
  become: true
  community.docker.docker_compose_v2:
    project_src: /home/{{ ansible_user }}/infrastructure/services/shlink

# can't restore the data at the moment -> I will check it later
# - name: Start Backup
#   become: true
#   community.docker.docker_compose_v2:
#     project_src: /home/{{ ansible_user }}/infrastructure/services/backup

- name: Create cron-job for mysql-dump backup every day at 3am
  ansible.builtin.cron:
    name: "backup mysql-cluster"
    minute: "0"
    hour: "3"
    job: "sh /home/{{ ansible_user }}/infrastructure/services/backup/mysql-dump-backup-script.sh"

- name: Run "mysql-dump-backup" Script
  become: true
  ansible.builtin.shell: |
    chmod +777 /home/{{ ansible_user }}/infrastructure/services/backup/mysql-dump-backup-script.sh
    /home/{{ ansible_user }}/infrastructure/services/backup/mysql-dump-backup-script.sh
