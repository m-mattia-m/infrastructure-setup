---

- name: Set variables from command-line arguments
  ansible.builtin.set_fact:
    restore_backup: "{{ restore_backup_arg }}"
    restore_backup_name: "{{ restore_backup_name_arg }}"
  vars:
    restore_backup_arg: "{{ ansible_playbook_extra_vars.restore_backup | default(false) }}"
    restore_backup_name_arg: "{{ ansible_playbook_extra_vars.restore_backup_name | default('') }}"

- name: Confirm playbook execution if restore_backup is false
  ansible.builtin.pause:
    prompt: "Do you want to run the playbook? (yes/no)"
  register: confirm_execution
  when: not restore_backup

- name: Set fact based on user input if restore_backup is false
  ansible.builtin.set_fact:
    run_playbook: "{{ confirm_execution.user_input | lower == 'yes' }}"
  when: not restore_backup

- name: Prompt for file choice if restore_backup is false and run_playbook is true
  ansible.builtin.pause:
    prompt: "Enter 'latest' to get the latest file or provide the specific file name"
  register: file_choice_prompt
  when: not restore_backup and run_playbook | default(false)

- name: Set file name based on command-line input or prompt if restore_backup is false and run_playbook is true
  ansible.builtin.set_fact:
    file_name: >-
      {{
        restore_backup_name
        if restore_backup | bool
        else (
          file_choice_prompt.user_input
          if file_choice_prompt.user_input != 'latest'
          else latest_file.s3_keys[0].key
        )
      }}
  when: not restore_backup and run_playbook | default(false)

- name: Get the latest file if not specified and if restore_backup is false and run_playbook is true
  ansible.builtin.aws_s3:
    bucket: "{{ s3_bucket }}"
    mode: list
    sort: last_modified
    order: descending
    max_keys: 1
    endpoint_url: "{{ aws_endpoint_url }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: latest_file
  when: not restore_backup and run_playbook | default(false) and (file_name | default('') == '')

- name: Set the latest file name if restore_backup is false and run_playbook is true
  ansible.builtin.set_fact:
    file_name: "{{ latest_file.s3_keys[0].key }}"
  when: not restore_backup and run_playbook | default(false) and (file_name | default('') == '')

- name: Ensure the destination directory exists if restore_backup is false and run_playbook is true
  ansible.builtin.file:
    path: "{{ destination }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"
  when: not restore_backup and run_playbook | default(false)

- name: Download the file from S3 if restore_backup is false and run_playbook is true
  ansible.builtin.aws_s3:
    bucket: "{{ s3_bucket }}"
    object: "{{ file_name }}"
    dest: "{{ destination }}/{{ file_name | basename }}"
    mode: get
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  when: not restore_backup and run_playbook | default(false)

- name: Unpack the downloaded file if restore_backup is false and run_playbook is true
  ansible.builtin.unarchive:
    src: "{{ destination }}/{{ file_name | basename }}"
    dest: "{{ destination }}"
    remote_src: true
  args:
    creates: "{{ destination }}/{{ file_name | basename | regex_replace('(.tar)$', '') }}"
  when: not restore_backup and run_playbook | default(false) and file_name.endswith('.tar')
